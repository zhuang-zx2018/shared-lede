#
# Copyright (C) 2022-2024 hugcabbage <fengsongtianxia@gmail.com>
#
# This is free software, licensed under the MIT License.
#
# <https://github.com/hugcabbage/shared-lede>
#
# The firmware code comes from coolsnowwolf lede
#
name: build lede

on:
  workflow_dispatch:
    inputs:
      model:
        description: '选择设备'
        required: true
        type: choice
        options:
          - 'qihoo-c301'
          - 'phicomm-k3'
          - 'tenda-ac9'
          - 'xiaomi-ax3600'
          - 'xiaomi-ax9000'
          - 'h3c-magic-nx30-pro'
          - 'qihoo-360t7'
          - 'xiaomi-ax3000t'
          - 'xiaomi-wr30u'
          - 'redmi-ax6000'
          - 'redmi-ax6s'
          - 'miwifi-mini'
          - 'miwifi-r3'
          - 'glinet-mt1300'
          - 'hiwifi-hc5962'
          - 'phicomm-k2p'
          - 'xiaomi-3g'
          - 'xiaomi-3g-v2'
          - 'xiaomi-3-pro'
          - 'xiaomi-4'
          - 'xiaomi-4a-gigabit'
          - 'xiaomi-ac2100'
          - 'xiaomi-cr6606'
          - 'xiaomi-cr6608'
          - 'xiaomi-cr6609'
          - 'redmi-ac2100'
          - 'youhua-wr1200js'
          - 'glinet-mt300n-v2'
          - 'glinet-microuter-n300'
          - 'xiaomi-4a-100m'
          - 'xiaomi-4c'
          - 'miwifi-nano'
      lan_ipad:
        description: '设置LAN口IP地址(会覆盖modify脚本中的设置)'
        required: false
        default: ''
        type: string
      login_pwd:
        description: '设置初始登陆密码(会覆盖modify脚本中的设置)'
        required: false
        default: ''
        type: string
      record:
        description: '输入版本描述'     
        required: false
        default: '升级内容：内核升级，更新应用版本'
        type: string
      cpu_overclock:
        description: '超频到1100Mhz'
        required: false
        type: boolean
      kernel_5_15:
        description: '使用5.15内核(超频勿选此项)'
        required: false
        type: boolean
      release:
        description: '上传到release'
        required: false
        default: true
        type: boolean
      artifact:
        description: '上传到artifact'
        required: false
        type: boolean

permissions:
  contents: write

jobs:
  to-build:
    name: build
    runs-on: ubuntu-latest
    env:
      EXTRA_STR: _some
    steps:

      - name: Hide sensitive inputs
        if: github.event_name == 'workflow_dispatch'
        uses: hugcabbage/action-hide-sensitive-inputs@v1
        with:
          include_inputs: login_pwd

      - name: Display initial disk space
        run: |
          df -h

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ${{ env.EXTRA_STR }}
          
      - name: Clear GitHub Actions cache
        run: |
          # 清理Actions运行器缓存
          rm -rf ~/.cache/actions-runner/_work/*
          rm -rf ~/.cache/actions-runner/cached/*
          
        # ▼▼▼ 添加这个清理步骤 ▼▼▼
      - name: Free disk space
        run: |
          # 显示清理前空间
          echo "=== Disk space BEFORE cleanup ==="
          df -h
          
          # 核心清理命令
          sudo rm -rf /usr/local/lib/android     # 清理Android SDK（如果不需要）
          sudo rm -rf /opt/ghc                  # 清理Haskell
          sudo rm -rf /usr/local/share/boost     # 清理Boost
          sudo rm -rf /usr/share/dotnet          # 清理.NET
          sudo rm -rf /usr/local/lib/node_modules # 清理全局Node模块
          sudo rm -rf /usr/local/share/powershell # 清理PowerShell
          sudo rm -rf /usr/local/share/chromium  # 清理Chromium
          
          # 清理系统缓存
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          # 清理Runner自身缓存
          rm -rf ~/.cache/actions-runner/_work/_temp
          rm -rf ~/.cache/actions-runner/cached/_diag/*.log
          
          # 显示清理后空间
          echo "=== Disk space AFTER cleanup ==="
          df -h
          
      # ▼▼▼ 添加这个强力清理步骤 ▼▼▼
      - name: Free disk space for OpenWrt build
        run: |
          # 显示清理前空间
          echo "=== Disk space BEFORE cleanup ==="
          df -h
          
          # 清理系统预装的大型开发工具
          sudo rm -rf /usr/local/lib/android     # Android SDK (~4GB)
          sudo rm -rf /opt/hostedtoolcache       # 工具缓存 (~3GB)
          sudo rm -rf /usr/local/share/powershell # PowerShell (~1GB)
          sudo rm -rf /usr/local/lib/node_modules # 全局Node模块 (~1GB)
          
          # 清理系统缓存
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          # 清理Runner自身缓存
          rm -rf ~/.cache/actions-runner/_work/_temp
          rm -rf ~/.cache/actions-runner/cached/_diag/*.log
          
          # 显示清理后空间
          echo "=== Disk space AFTER cleanup ==="
          df -h
      # ▲▲▲ 清理步骤结束 ▲▲▲
      
      # ▲▲▲ 清理步骤结束 ▲▲▲
      # 2. 添加清理步骤（关键部分）
      - name: Clean temporary files and free disk space
        run: |
          # 显示清理前的磁盘空间
          echo "Disk space before cleanup:"
          df -h
          
          # 清理系统临时文件
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          # 清理APT缓存
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          
          # 清理构建临时文件
          rm -rf $GITHUB_WORKSPACE/tmp
          rm -rf $GITHUB_WORKSPACE/build_dir
          rm -rf $GITHUB_WORKSPACE/staging_dir
          
          # 清理下载缓存（谨慎使用）
          # rm -rf $GITHUB_WORKSPACE/dl/*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php
          
          # 显示清理后的磁盘空间
          echo "Disk space after cleanup:"
          df -h
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo add-apt-repository -y multiverse
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential gettext autopoint

      - name: Prepare environments
        env:
          REQUIREMENTS: ${{ env.EXTRA_STR }}/extra-files/requirements-transit.txt
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-multilib gettext
          sudo apt-get clean
          pip3 install -r $REQUIREMENTS
                
      - name: Prepare deployment
        id: prepare-deployment
        env:
          MODEL_NAME: ${{ inputs.model }}
          LOGIN_IP: ${{ inputs.lan_ipad }}
          LOGIN_PWD: ${{ inputs.login_pwd }}
          TEMP_PREFIX: ${{ env.EXTRA_STR }}
          DEPLOY_DIR: ${{ env.EXTRA_STR }}/preset-lede
          TRANSIT_PY: ${{ env.EXTRA_STR }}/extra-files/transit.py
        run: |
          chmod +x $TRANSIT_PY
          $TRANSIT_PY

      - name: Clone sources
        env:
          CLONE_SH: ${{ steps.prepare-deployment.outputs.clone_sh }}
        run: |
          chmod +x $CLONE_SH
          $CLONE_SH

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Modify configuration
        env:
          MODIFY_SH: ${{ steps.prepare-deployment.outputs.modify_sh }}
          CPUO: ${{ inputs.cpu_overclock }}
          K515: ${{ inputs.kernel_5_15 }}
        run: |
          $CPUO && ! $K515 && \
            sed -i '/fix-cpu-clk-add-clkdev/ s/#//' $MODIFY_SH
          $K515 && \
            sed -i '/KERNEL_PATCHVER:=5.15/ s/#//' $MODIFY_SH
          chmod +x $MODIFY_SH
          $MODIFY_SH

      - name: Generate .config
        env:
          DOT_CONFIG: ${{ steps.prepare-deployment.outputs.dot_config }}
        run: |
          mv $DOT_CONFIG .config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s

      - name: Compile
        run: |
          make -j$(nproc) || make -j1 V=s

      - name: Pick up files
        run: |
          mkdir -p _collected_firmware/packages
          rm -rf $(find bin/targets/ -type d -name 'packages')
          cp $(find bin/targets/ -type f) _collected_firmware
          cp $(find bin/packages/ -type f -name '*.ipk') _collected_firmware/packages
          cd _collected_firmware
          zip -r allfiles.zip *
          cd packages
          zip -r ../packages.zip *

      - name: Generate summary
        continue-on-error: true
        id: generate-summary
        env:
          FOR_DEVICE: ${{ steps.prepare-deployment.outputs.fordevice }}
          CODE_DIR: ${{ steps.prepare-deployment.outputs.codedir }}
          TRANSIT_PY: ${{ env.EXTRA_STR }}/extra-files/transit.py
        run: |
          chmod +x $TRANSIT_PY
          $TRANSIT_PY

      - name: Calculate tag version
        id: calculate-version
        if: inputs.release
        uses: hugcabbage/next-version@v1
        with:
          repo_path: ${{ env.EXTRA_STR }}

      - name: Upload firmware to release
        id: to-release
        if: steps.calculate-version.conclusion == 'success' && inputs.release
        continue-on-error: true
        uses: svenstaro/upload-release-action@v2
        with:
          file: _collected_firmware/*
          tag: ${{ steps.calculate-version.outputs.version }}
          release_name: ${{ steps.calculate-version.outputs.version }} ${{ steps.generate-summary.outputs.stitle }}
          overwrite: true
          prerelease: false
          body: |
            ${{ inputs.record }}
            ${{ steps.generate-summary.outputs.summary }}
          file_glob: true

      - name: Upload firmware to artifact
        if: inputs.artifact || steps.to-release.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: collected_firmware
          path: |
            _collected_firmware/
            !_collected_firmware/*.zip

      - name: Display finishing disk space
        run: |
          df -h
          echo "----------------------------"
          du -h --max-depth=1
